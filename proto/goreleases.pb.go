// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goreleases.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	goreleases.proto

It has these top-level messages:
	GetReleaseInfoRequest
	ListReleasesRequest
	ListReleasesResponse
	ReleaseInfo
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type GetReleaseInfoRequest struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetReleaseInfoRequest) Reset()                    { *m = GetReleaseInfoRequest{} }
func (m *GetReleaseInfoRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetReleaseInfoRequest) ProtoMessage()               {}
func (*GetReleaseInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetReleaseInfoRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ListReleasesRequest struct {
}

func (m *ListReleasesRequest) Reset()                    { *m = ListReleasesRequest{} }
func (m *ListReleasesRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListReleasesRequest) ProtoMessage()               {}
func (*ListReleasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ListReleasesResponse struct {
	Releases []*ReleaseInfo `protobuf:"bytes,1,rep,name=releases" json:"releases,omitempty"`
}

func (m *ListReleasesResponse) Reset()                    { *m = ListReleasesResponse{} }
func (m *ListReleasesResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListReleasesResponse) ProtoMessage()               {}
func (*ListReleasesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListReleasesResponse) GetReleases() []*ReleaseInfo {
	if m != nil {
		return m.Releases
	}
	return nil
}

type ReleaseInfo struct {
	Version         string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	ReleaseDate     string `protobuf:"bytes,2,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	ReleaseNotesUrl string `protobuf:"bytes,3,opt,name=release_notes_url,json=releaseNotesUrl" json:"release_notes_url,omitempty"`
}

func (m *ReleaseInfo) Reset()                    { *m = ReleaseInfo{} }
func (m *ReleaseInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReleaseInfo) ProtoMessage()               {}
func (*ReleaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReleaseInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ReleaseInfo) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *ReleaseInfo) GetReleaseNotesUrl() string {
	if m != nil {
		return m.ReleaseNotesUrl
	}
	return ""
}

func init() {
	proto1.RegisterType((*GetReleaseInfoRequest)(nil), "proto.GetReleaseInfoRequest")
	proto1.RegisterType((*ListReleasesRequest)(nil), "proto.ListReleasesRequest")
	proto1.RegisterType((*ListReleasesResponse)(nil), "proto.ListReleasesResponse")
	proto1.RegisterType((*ReleaseInfo)(nil), "proto.ReleaseInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoReleaseService service

type GoReleaseServiceClient interface {
	GetReleaseInfo(ctx context.Context, in *GetReleaseInfoRequest, opts ...grpc.CallOption) (*ReleaseInfo, error)
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
}

type goReleaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoReleaseServiceClient(cc *grpc.ClientConn) GoReleaseServiceClient {
	return &goReleaseServiceClient{cc}
}

func (c *goReleaseServiceClient) GetReleaseInfo(ctx context.Context, in *GetReleaseInfoRequest, opts ...grpc.CallOption) (*ReleaseInfo, error) {
	out := new(ReleaseInfo)
	err := grpc.Invoke(ctx, "/proto.GoReleaseService/GetReleaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goReleaseServiceClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	out := new(ListReleasesResponse)
	err := grpc.Invoke(ctx, "/proto.GoReleaseService/ListReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoReleaseService service

type GoReleaseServiceServer interface {
	GetReleaseInfo(context.Context, *GetReleaseInfoRequest) (*ReleaseInfo, error)
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
}

func RegisterGoReleaseServiceServer(s *grpc.Server, srv GoReleaseServiceServer) {
	s.RegisterService(&_GoReleaseService_serviceDesc, srv)
}

func _GoReleaseService_GetReleaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoReleaseServiceServer).GetReleaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoReleaseService/GetReleaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoReleaseServiceServer).GetReleaseInfo(ctx, req.(*GetReleaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoReleaseService_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoReleaseServiceServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoReleaseService/ListReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoReleaseServiceServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoReleaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoReleaseService",
	HandlerType: (*GoReleaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReleaseInfo",
			Handler:    _GoReleaseService_GetReleaseInfo_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _GoReleaseService_ListReleases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goreleases.proto",
}

func init() { proto1.RegisterFile("goreleases.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x1b, 0x8b, 0xff, 0x26, 0x45, 0xeb, 0x68, 0x61, 0x89, 0x1e, 0xea, 0x9e, 0x8a, 0x87,
	0x80, 0xf5, 0x2b, 0x14, 0x4b, 0x41, 0x3c, 0x44, 0x3c, 0x97, 0xa8, 0xa3, 0x04, 0x42, 0xa6, 0xee,
	0x6c, 0xf3, 0x85, 0xfc, 0xa2, 0xe2, 0x66, 0x57, 0x52, 0xd8, 0x9e, 0x42, 0xe6, 0xf7, 0x1e, 0xef,
	0xed, 0x83, 0xf1, 0x17, 0x1b, 0xaa, 0xa9, 0x14, 0x92, 0x7c, 0x63, 0xd8, 0x32, 0x1e, 0xba, 0x8f,
	0xbe, 0x87, 0xc9, 0x92, 0x6c, 0xd1, 0xb1, 0x55, 0xf3, 0xc9, 0x05, 0x7d, 0x6f, 0x49, 0x2c, 0x2a,
	0x38, 0x6e, 0xc9, 0x48, 0xc5, 0x8d, 0x4a, 0xa6, 0xc9, 0xec, 0xb4, 0x08, 0xbf, 0x7a, 0x02, 0x97,
	0x4f, 0x95, 0x04, 0x8f, 0x78, 0x83, 0x7e, 0x84, 0xab, 0xdd, 0xb3, 0x6c, 0xb8, 0x11, 0xc2, 0x1c,
	0x4e, 0x42, 0xb4, 0x4a, 0xa6, 0xc3, 0x59, 0x3a, 0xc7, 0xae, 0x42, 0xde, 0x4f, 0xfd, 0xd7, 0xe8,
	0x16, 0xd2, 0x1e, 0xd8, 0xdf, 0x03, 0x6f, 0x61, 0xe4, 0x4d, 0xeb, 0x8f, 0xd2, 0x92, 0x3a, 0x70,
	0x38, 0xf5, 0xb7, 0x45, 0x69, 0x09, 0xef, 0xe0, 0x22, 0x48, 0x1a, 0xb6, 0x24, 0xeb, 0xad, 0xa9,
	0xd5, 0xd0, 0xe9, 0xce, 0x3d, 0x78, 0xfe, 0xbb, 0xbf, 0x9a, 0x7a, 0xfe, 0x93, 0xc0, 0x78, 0xc9,
	0x3e, 0xfa, 0x85, 0x4c, 0x5b, 0xbd, 0x13, 0x2e, 0xe0, 0x6c, 0x77, 0x1e, 0xbc, 0xf1, 0xe5, 0xa3,
	0xab, 0x65, 0x91, 0xa7, 0xe9, 0x01, 0xae, 0x60, 0xd4, 0x9f, 0x06, 0x33, 0xaf, 0x8a, 0xcc, 0x98,
	0x5d, 0x47, 0x59, 0xb7, 0xa5, 0x1e, 0xbc, 0x1d, 0x39, 0xfa, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x60, 0xe4, 0xa6, 0xbc, 0xd1, 0x01, 0x00, 0x00,
}
